---
# tasks file for roles/letsencrypt
- name: install requirements and update apt cache if it is too old
  apt: name={{ item }} update_cache=yes cache_valid_time=86400
  with_items:
      - git

- name: create required directories
  file: dest={{ item }} state=directory
  with_items:
      - "{{ letsencrypt_path }}"
      - "{{ letsencrypt_webroot }}"

- name: clone letsencrypt repository
  git: repo=https://github.com/letsencrypt/letsencrypt dest={{ letsencrypt_path }}

- name: get key state
  stat: path=/etc/letsencrypt/live/{{ item }}/privkey.pem
  register: key_states
  changed_when: not key_states.stat.exists
  with_items: "{{ letsencrypt.values() }}"

- name: check if server listens on port 80
  shell: netstat -tunlp | grep ":80 "
  failed_when: false
  changed_when: check_80.rc == 1
  register: check_80
  
- name: check if server listens on port 443
  shell: netstat -tunlp | grep ":443 "
  failed_when: false
  changed_when: check_443.rc == 1
  register: check_443
  
- name: define 
  set_fact:
      generate_cmds: "{%- set emails_new = [] -%}
                      {%- for key, names in letsencrypt.iteritems() -%}
                          {%- for keystat in key_states.results -%}
                              {%- for name in names -%}
                                  {%- if keystat.item == name and keystat.changed -%}
                                      {%- if emails_new.append(key) -%}{%- endif -%}
                                  {%- endif -%}
                              {%- endfor -%}
                          {%- endfor -%}
                      {%- endfor -%}
                      {%- for mail in emails_new| unique  -%}
                          {{ letsencrypt_path }}/letsencrypt-auto certonly --agree-tos --redirect --duplicate --text --email {{ mail }}
                              {%- for name in letsencrypt[mail] -%}
                                  {{ ' ' }}-d {{ name }}
                              {%- endfor -%}
                              {{ ' ' }}
                              {%- if check_443.changed  and check_80.changed -%}
                                --standalone
                              {%- else -%}
                          --webroot --webroot-path {{ letsencrypt_webroot }}
                              {%- endif -%}
                              {{ '\n' if not loop.last else '' }}
                      {%- endfor -%}"

- name: show cert generation commands
  debug: var=generate_cmds.split('\n')
      
- name: generate cert
  shell: "{{ item }}"
  with_items: generate_cmds.split('\n')
  when: item|length > 0

- name: put letsencrypt cron job
  cron:
      name: renew letsencrypt certificates
      cron_file: letsencrypt
      user: root
      minute: 14
      hour: 4
      day: 14
      job: "{{ letsencrypt_path }}/letsencrypt-auto certonly --webroot --webroot-path {{ letsencrypt_webroot }} {% for names in letsencrypt.values() %}{% for name in names %} -d {{ name }}{% endfor %}{% endfor %} --renew-by-default 2>&1 | logger -t letsencrypt"
  when: letsencrypt.values()|length > 0 and letsencrypt.values()[0]|length > 0

- name: put nginx hup cron job
  cron:
      name: reload nginx to renew certificates
      cron_file: letsencrypt
      user: root
      minute: 23
      hour: 4
      day: 14
      job: service nginx reload 2>&1 | logger -t letsencrypt
  when: letsencrypt_reload_nginx
